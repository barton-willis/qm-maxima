\input texinfo   @c -*-texinfo-*-

@setfilename qm.info
@settitle Package qm

@ifinfo
@macro var {expr}
<\expr\>
@end macro
@end ifinfo

@dircategory Mathematics/Maxima
@direntry
* Package qm: (maxima) Maxima share package qm for quantum mechanics
@end direntry

@menu
* Introduction to package qm::
* Functions and Variables for qm::
@end menu
@node Top, Introduction to package qm, (dir), (dir)
@top

@menu
* Introduction to package qm::
* Functions and Variables for qm::

@detailmenu
 --- The Detailed Node Listing ---

* Introduction to package qm::
* Functions and Variables for qm::

@end detailmenu
@end menu


@chapter Package qm

@node Introduction to package qm, Functions and Variables for qm, Top, Top
@section Introduction to package qm

The @code{qm} package was written by Eric Majzoub, University of
Missouri. Email: majzoube-at-umsystem.edu

The package is loaded with: @code{load(qm);}

The @code{qm} package provides functions and standard definitions to
solve quantum mechanics problems in a finite dimensional Hilbert
space. For example, one can calculate the outcome of Stern-Gerlach
experiments using built-in definitions of the Sx, Sy, and Sz operators
for arbitrary spin, e.g. @code{s=@{1/2, 1, 3/2, @dots{}@}}. For spin-1/2
the standard basis states in the @code{x}, @code{y}, and @code{z}-basis
are available as @code{@{xp,xm@}}, @code{@{yp,ym@}}, and
@code{@{zp,zm@}}, respectively. One can create general ket vectors with
arbitrary but finite dimension and perform standard computations such as
expectation value, variance, etc. The angular momentum @var{|j,m>}
representation of kets is also available. Tensor product states for
multiparticle systems can be created to perform calculations on those
systems.

Let us consider a simple example involving spin-1/2 particles.
A bra vector in the @code{z}-basis may be written as 

@*
@ @ @ @ @ @ @ @ @code{<psi| = a <z+| + b <z-|}.
@*

The bra will be represented in Maxima by the row vector @code{[a b]},
where the basis vectors are

@ @ @ @ @ @ @ @ @code{<z+| = [1 0]}

@noindent
and

@ @ @ @ @ @ @ @ @code{<z-| = [0 1]}.

There are two types of kets and bras available in this package, the
first type is given by a @emph{matrix representation}, as in the above
example. @code{mket}s are column vectors and @code{mbra}s are row
vectors, and their components are entered as Maxima @emph{lists} in the
@code{mbra} and @code{mket} functions. The second type of bra or ket is
@emph{abstract}; there is no matrix representation. Abstract bras and
kets are entered using the @code{bra} and @code{ket} functions using
Maxima lists for the elements. These general kets are displayed in Dirac
notation. For example, a tensor product of two ket vectors @code{|a>}
and @code{|b>} is input as @code{ket([a,b])} and displayed as

@*
@ @ @ @ @ @ @ @ @code{|[a,b]>} @ @ @ @ @ (general ket)
@*

@noindent
Note that abstract kets and bras are @emph{assumed to be
orthonormal}. These general bras and kets may be used to build
arbitrarily large tensor product states. Tensor product states in the
matrix representation are also available through the @code{tpket} and
@code{tpbra} commands.

The following examples illustrate some of the basic capabilities of the
@code{qm} package. Here both abstract, and concrete (matrix
representation) kets are shown.

@example
@group
(%i1) ket([a,b])+ket([c,d]);
(%o1)                         |[c, d]> + |[a, b]>
(%i2) mket([a,b])+mket([c,d]);
                                   [ c + a ]
(%o2)                              [       ]
                                   [ d + b ]
(%i3) bell:(1/sqrt(2))*(ket([u,d])-ket([d,u]));
                              |[u, d]> - |[d, u]>
(%o3)                         -------------------
                                    sqrt(2)
@end group
@end example

Note that @code{ket([a,b])} is treated as tensor product of states
@code{a} and @code{b} as shown below.

@example
@group
(%i1) braket(bra([a1,b1]),ket([a2,b2]));
(%o1)                kron_delta(a1, a2) kron_delta(b1, b2)
@end group
@end example

Next, tensor products of the spin-1/2 basis states @code{@{zp,zm@}} are
shown in the matrix representation.

@example
@group
(%i1) tpket([zp,zm]);
                                     [ 1 ]  [ 0 ]
(%o1)                       [tpket, [[   ], [   ]]]
                                     [ 0 ]  [ 1 ]
@end group
@end example

Constants that multiply kets and bras must be declared complex by
the user in order for the dagger function to properly conjugate
such constants. The example below illustrates this behavior.

@example
@group
(%i1) declare([a,b],complex);
(%o1)                                done
(%i2) psi:a*ket([1])+b*ket([2]);
(%o2)                          |[2]> b + |[1]> a
(%i3) psidag:dagger(psi);
(%o3)               <[2]| conjugate(b) + <[1]| conjugate(a)
(%i4) psidag . psi;
(%o4)                   b conjugate(b) + a conjugate(a)
@end group
@end example

The following shows how to declare a ket with both real and
complex components in the matrix representation.

@example
@group
(%i1) declare([c1,c2],complex,r,real);
(%o1)                                done
(%i2) k:mket([c1,c2,r]);
                                    [ c1 ]
                                    [    ]
(%o2)                               [ c2 ]
                                    [    ]
                                    [ r  ]
(%i3) b:dagger(k);
(%o3)                 [ conjugate(c1)  conjugate(c2)  r ]
(%i4) b . k;
                    2
(%o4)              r  + c2 conjugate(c2) + c1 conjugate(c1)
@end group
@end example

@node Functions and Variables for qm, , Introduction to package qm, Top
@section Functions and Variables for qm

@defvr {Variable} hbar
Planck's constant divided by @code{2*%pi}. @code{hbar} is not given a
floating point value, but is declared to be a real number greater than
zero.
@end defvr

@anchor{ket}
@deffn {Function} ket ([@code{k@sub{1}},@code{k@sub{2}},@dots{}])
@code{ket} creates a general state ket, or tensor product, with symbols
@code{k@sub{i}} representing the states. The state kets @code{k@sub{i}}
are assumed to be orthonormal.
@end deffn

@example
@group
(%i1) k:ket([u,d]);
(%o1)                              |[u, d]>
(%i2) b:bra([u,d]);
(%o2)                              <[u, d]|
(%i3) b . k;
(%o3)                                  1
@end group
@end example

@anchor{ketp}
@deffn {Function} ketp (abstract ket)
@code{ketp} is a predicate function for abstract kets. It returns
@code{true} for abstract @code{ket}s and @code{false} for anything else.
@end deffn

@anchor{bra}
@deffn {Function} bra ([@code{b@sub{1}},@code{b@sub{2}},@dots{}])
@code{bra} creates a general state bra, or tensor product, with symbols
@code{b@sub{i}} representing the states. The state bras @code{b@sub{i}}
are assumed to be orthonormal.
@end deffn

@example
@group
(%i1) k:ket([u,d]);
(%o1)                              |[u, d]>
(%i2) b:bra([u,d]);
(%o2)                              <[u, d]|
(%i3) b . k;
(%o3)                                  1
@end group
@end example

@anchor{brap}
@deffn {Function} brap (abstract bra)
@code{brap} is a predicate function for abstract bras. It returns
@code{true} for abstract @code{bra}s and @code{false} for anything else.
@end deffn

@anchor{mket}
@deffn {Function} mket ([@code{c@sub{1}},@code{c@sub{2}},@dots{}])
@code{mket} creates a @emph{column} vector of arbitrary finite
dimension. The entries @code{c@sub{i}} can be any Maxima expression.
The user must @code{declare} any relevant constants to be complex. For a
matrix representation the elements must be entered as a list in
@code{[@dots{}]} square brackets.
@end deffn

@example
@group
(%i1) declare([c1,c2],complex);
(%o1)                                done
(%i2) mket([c1,c2]);
                                    [ c1 ]
(%o2)                               [    ]
                                    [ c2 ]
(%i3) facts();
(%o3) [kind(hbar, real), hbar > 0, kind(c1, complex), kind(c2, complex)]
@end group
@end example

@anchor{mketp}
@deffn {Function} mketp (@emph{vector})
@code{mketp} is a predicate function that checks if its input is an mket,
in which case it returns @code{true}, else it returns @code{false}.
@code{mketp} only returns @code{true} for the matrix representation of a ket.
@end deffn

@example
@group
(%i1) k:ket([a,b]);
(%o1)                              |[a, b]>
(%i2) mketp(k);
(%o2)                                false
(%i3) k:mket([a,b]);
                                     [ a ]
(%o3)                                [   ]
                                     [ b ]
(%i4) mketp(k);
(%o4)                                true
@end group
@end example

@anchor{mbra}
@deffn {Function} mbra ([@code{c@sub{1}},@code{c@sub{2}},@dots{}])
@code{mbra} creates a @emph{row} vector of arbitrary finite
dimension. The entries @code{c@sub{i}} can be any Maxima expression.
The user must @code{declare} any relevant constants to be complex.
For a matrix representation the elements must be entered as a list
in @code{[@dots{}]} square brackets.
@end deffn

@example
@group
(%i1) kill(c1,c2);
(%o1)                                done
(%i2) mbra([c1,c2]);
(%o2)                             [ c1  c2 ]
(%i3) facts();
(%o3)                    [kind(hbar, real), hbar > 0]
@end group
@end example

@anchor{mbrap}
@deffn {Function} mbrap (@emph{vector})
@code{mbrap} is a predicate function that checks if its input is an mbra,
in which case it returns @code{true}, else it returns @code{false}.
@code{mbrap} only returns @code{true} for the matrix representation of a bra.
@end deffn

@example
@group
(%i1) b:mbra([a,b]);
(%o1)                              [ a  b ]
(%i2) mbrap(b);
(%o2)                                true
@end group
@end example

Two additional functions are provided to create kets and bras in the
matrix representation. These functions conveniently attempt to
automatically @code{declare} constants as complex. For example, if a
list entry is @code{a*sin(x)+b*cos(x)} then only @code{a} and @code{b}
will be @code{declare}-d complex and not @code{x}.

@anchor{autoket}
@deffn {Function} autoket ([@code{a@sub{1},a@sub{2},@dots{}}])
@code{autoket} takes a list [@code{a@sub{1},a@sub{2},@dots{}}] and
returns a ket with the coefficients @code{a@sub{i}} @code{declare}-d
complex. Simple expressions such as @code{a*sin(x)+b*cos(x)} are allowed
and will @code{declare} only the coefficients as complex.
@end deffn

@example
@group
(%i1) autoket([a,b]);
                                     [ a ]
(%o1)                                [   ]
                                     [ b ]
(%i2) facts();
(%o2)  [kind(hbar, real), hbar > 0, kind(a, complex), kind(b, complex)]
@end group
@group
(%i1) autoket([a*sin(x),b*sin(x)]);
                                 [ a sin(x) ]
(%o1)                            [          ]
                                 [ b sin(x) ]
(%i2) facts();
(%o2)  [kind(hbar, real), hbar > 0, kind(a, complex), kind(b, complex)]
@end group
@end example

@anchor{autobra}
@deffn {Function} autobra ([@code{a@sub{1},a@sub{2},@dots{}}])
@code{autobra} takes a list [@code{a@sub{1},a@sub{2},@dots{}}] and
returns a bra with the coefficients @code{a@sub{i}} @code{declare}-d
complex. Simple expressions such as @code{a*sin(x)+b*cos(x)} are allowed
and will @code{declare} only the coefficients as complex.
@end deffn

@example
@group
(%i1) autobra([a,b]);
(%o1)                              [ a  b ]
(%i2) facts();
(%o2)  [kind(hbar, real), hbar > 0, kind(a, complex), kind(b, complex)]
@end group
@group
(%i1) autobra([a*sin(x),b]);
(%o1)                           [ a sin(x)  b ]
(%i2) facts();
(%o2)  [kind(hbar, real), hbar > 0, kind(a, complex), kind(b, complex)]
@end group
@end example

@anchor{dagger}
@deffn {Function} dagger (@emph{vector})
@code{dagger} is the quantum mechanical @emph{dagger} function and returns
the @code{conjugate} @code{transpose} of its input. Arbitrary constants
must be @code{declare}-d complex for dagger to produce the conjugate.
@end deffn

@example
@group
(%i1) dagger(mbra([%i,2]));
                                   [ - %i ]
(%o1)                              [      ]
                                   [  2   ]
@end group
@end example

@anchor{braket}
@deffn {Function} braket (@code{psi,phi})
Given two kets @code{psi} and @code{phi}, @code{braket} returns the
quantum mechanical bracket @code{<psi|phi>}. The vector @code{psi} may be
input as either a @code{ket} or @code{bra}. If it is a @code{ket} it will be
turned into a @code{bra} with the @code{dagger} function before the inner
product is taken. The vector @code{phi} must always be a @code{ket}.
@end deffn

@example
@group
(%i1) declare([a,b,c],complex);
(%o1)                                done
(%i2) braket(mket([a,b,c]),mket([a,b,c]));
(%o2)          c conjugate(c) + b conjugate(b) + a conjugate(a)
(%i3) braket(ket([a1,b1,c1]),ket([a2,b2,c2]));
(%o3)      kron_delta(a1, a2) kron_delta(b1, b2) kron_delta(c1, c2)
@end group
@end example

@anchor{norm}
@deffn {Function} norm (@code{psi})
Given a @code{ket} or @code{bra} @code{psi}, @code{norm} returns the
square root of the quantum mechanical bracket @code{<psi|psi>}.
The vector @code{psi} must always be a @code{ket}, otherwise the
function will return @code{false}.
@end deffn

@example
@group
(%i1) declare([a,b,c],complex);
(%o1)                                done
(%i2) norm(mket([a,b,c]));
(%o2)       sqrt(c conjugate(c) + b conjugate(b) + a conjugate(a))
@end group
@end example

@deffn {Function} magsqr (@code{c})
@code{magsqr} returns @code{conjugate(c)*c}, the magnitude
squared of a complex number.
@end deffn

@example
@group
(%i1) declare([a,b,c,d],complex);
(%o1)                                done
(%i2) A:braket(mket([a,b]),mket([c,d]));
(%o2)                   conjugate(b) d + conjugate(a) c
(%i3) P:magsqr(A);
(%o3) (conjugate(b) d + conjugate(a) c) (b conjugate(d) + a conjugate(c))
@end group
@end example

@subsection Handling general kets and bras

General kets and bras are, as discussed, created without using a list
when giving the arguments. The following examples show how general
kets and bras can be manipulated.

@example
@group
(%i1) ket([a])+ket([b]);
(%o1)                            |[b]> + |[a]>
(%i2) braket(bra([a]),ket([b]));
(%o2)                          kron_delta(a, b)
(%i3) braket(bra([a])+bra([c]),ket([b]));
(%o3)                 kron_delta(b, c) + kron_delta(a, b)
@end group
@end example

@subsection Spin-1/2 state kets and associated operators

Spin-1/2 particles are characterized by a simple 2-dimensional Hilbert
space of states. It is spanned by two vectors. In the @var{z}-basis
these vectors are @code{@{zp,zm@}}, and the basis kets in the
@var{z}-basis are @code{@{xp,xm@}} and @code{@{yp,ym@}} respectively.

@deffn {Function} zp
Return the @var{|z+>} ket in the @var{z}-basis.
@end deffn

@deffn {Function} zm
Return the @var{|z->} ket in the @var{z}-basis.
@end deffn

@deffn {Function} xp
Return the @var{|x+>} ket in the @var{z}-basis.
@end deffn

@deffn {Function} xm
Return the @var{|x->} ket in the @var{z}-basis.
@end deffn

@deffn {Function} yp
Return the @var{|y+>} ket in the @var{z}-basis.
@end deffn

@deffn {Function} ym
Return the @var{|y->} ket in the @var{z}-basis.
@end deffn

@example
@group
(%i1) zp;
                                     [ 1 ]
(%o1)                                [   ]
                                     [ 0 ]
(%i2) zm;
                                     [ 0 ]
(%o2)                                [   ]
                                     [ 1 ]
@end group
@group
(%i1) yp;
                                  [    1    ]
                                  [ ------- ]
                                  [ sqrt(2) ]
(%o1)                             [         ]
                                  [   %i    ]
                                  [ ------- ]
                                  [ sqrt(2) ]
(%i2) ym;
                                 [     1     ]
                                 [  -------  ]
                                 [  sqrt(2)  ]
(%o2)                            [           ]
                                 [     %i    ]
                                 [ - ------- ]
                                 [   sqrt(2) ]
@end group
@group
(%i1) braket(xp,zp);
                                       1
(%o1)                               -------
                                    sqrt(2)
@end group
@end example

Switching bases is done in the following example where a @var{z}-basis
ket is constructed and the @var{x}-basis ket is computed.

@example
@group
(%i1) declare([a,b],complex);
(%o1)                                done
(%i2) psi:mket([a,b]);
                                     [ a ]
(%o2)                                [   ]
                                     [ b ]
(%i3) psi_x:'xp*braket(xp,psi)+'xm*braket(xm,psi);
                    b         a              a         b
(%o3)           (------- + -------) xp + (------- - -------) xm
                 sqrt(2)   sqrt(2)        sqrt(2)   sqrt(2)
@end group
@end example

@subsection Pauli matrices and Sz, Sx, Sy operators

@deffn {Function} @code{sigmax}
Returns the Pauli @var{x} matrix.
@end deffn

@deffn {Function} @code{sigmay}
Returns the Pauli @var{y} matrix.
@end deffn

@deffn {Function} @code{sigmaz}
Returns the Pauli @var{z} matrix.
@end deffn

@deffn {Function} @code{Sx}
Returns the spin-1/2 @var{Sx} matrix.
@end deffn

@deffn {Function} @code{Sy}
Returns the spin-1/2 @var{Sy} matrix.
@end deffn

@deffn {Function} @code{Sz}
Returns the spin-1/2 @var{Sz} matrix.
@end deffn

@example
@group
(%i1) sigmay;
                                 [ 0   - %i ]
(%o1)                            [          ]
                                 [ %i   0   ]
(%i2) Sy;
                            [            %i hbar ]
                            [    0     - ------- ]
                            [               2    ]
(%o2)                       [                    ]
                            [ %i hbar            ]
                            [ -------      0     ]
                            [    2               ]
@end group
@end example

@deffn {Function} commutator (@code{X,Y})
Given two operators @code{X} and @code{Y}, return the
commutator @code{X . Y - Y . X}.
@end deffn

@example
@group
(%i1) commutator(Sx,Sy);
                           [        2             ]
                           [ %i hbar              ]
                           [ --------      0      ]
                           [    2                 ]
(%o1)                      [                      ]
                           [                    2 ]
                           [             %i hbar  ]
                           [    0      - -------- ]
                           [                2     ]
@end group
@end example

@subsection SX, SY, SZ operators for any spin

@deffn {Function} SX (@code{s})
@code{SX(s)} for spin @code{s} returns the matrix representation of the
spin operator @code{Sx}. Shortcuts for spin-1/2 are @code{Sx,Sy,Sz}, and
for spin-1 are @code{Sx1,Sy1,Sz1}.
@end deffn

@deffn {Function} SY (@code{s})
@code{SY(s)} for spin @code{s} returns the matrix representation of the
spin operator @code{Sy}. Shortcuts for spin-1/2 are @code{Sx,Sy,Sz}, and
for spin-1 are @code{Sx1,Sy1,Sz1}.
@end deffn

@deffn {Function} SZ (@code{s})
@code{SZ(s)} for spin @code{s} returns the matrix representation of the
spin operator @code{Sz}. Shortcuts for spin-1/2 are @code{Sx,Sy,Sz}, and
for spin-1 are @code{Sx1,Sy1,Sz1}.
@end deffn

Example:

@example
@group
(%i1) SY(1/2);
                            [            %i hbar ]
                            [    0     - ------- ]
                            [               2    ]
(%o1)                       [                    ]
                            [ %i hbar            ]
                            [ -------      0     ]
                            [    2               ]
(%i2) SX(1);
                         [           hbar            ]
                         [    0     -------     0    ]
                         [          sqrt(2)          ]
                         [                           ]
                         [  hbar              hbar   ]
(%o2)                    [ -------     0     ------- ]
                         [ sqrt(2)           sqrt(2) ]
                         [                           ]
                         [           hbar            ]
                         [    0     -------     0    ]
                         [          sqrt(2)          ]
@end group
@end example

@subsection Expectation value and variance

@deffn {Function} expect (@code{O,psi})
Computes the quantum mechanical expectation value of the operator @code{O}
in state @code{psi}, @code{<psi|O|psi>}.
@end deffn

@example
@group
(%i1) ev(expect(Sy,xp+ym),ratsimp);
(%o1)                               - hbar
@end group
@end example

@deffn {Function} qm_variance (@code{O,psi})
Computes the quantum mechanical variance of the operator @code{O}
in state @code{psi}, @code{sqrt(<psi|O@sup{2}|psi> - <psi|O|psi>@sup{2})}.
@end deffn

@example
@group
(%i1) ev(qm_variance(Sy,xp+ym),ratsimp);
                                    %i hbar
(%o1)                               -------
                                       2
@end group
@end example

@subsection Angular momentum representation of kets and bras

To create kets and bras in the @var{|j,m>} representation you can use
the following functions.

@deffn {Function} jmket (@code{j,m})
@code{jmket} creates the ket @var{|j,m>} for total spin @var{j}
and @var{z}-component @var{m}.
@end deffn

@deffn {Function} jmbra (@code{j,m})
@code{jmbra} creates the bra @var{<j,m|} for total spin @var{j}
and @var{z}-component @var{m}.
@end deffn

@example
@group
(%i1) jmbra(3/2,1/2);
                                        3  1
(%o1)                             jmbra(-, -)
                                        2  2
(%i2) jmbra([3/2,1/2]);
                                       [ 3  1 ]
(%o2)                          [jmbra, [ -  - ]]
                                       [ 2  2 ]
@end group
@end example

@deffn {Function} jmketp (jmket)
@code{jmketp} checks to see that the ket has the 'jmket' marker.
@end deffn

@example
@group
(%i1) jmketp(jmket(j,m));
(%o1)                                false
(%i2) jmketp(jmket([j,m]));
(%o2)                                true
@end group
@end example


@deffn {Function} jmbrap (jmbra)
@code{jmbrap} checks to see that the bra has the 'jmbra' marker.
@end deffn

@deffn {Function} jmcheck (@code{j,m})
@code{jmcheck} checks to see that @var{m} is one of @{-j, @dots{}, +j@}.
@end deffn

@example
@group
(%i1) jmcheck(3/2,1/2);
(%o1)                                true
@end group
@end example


@deffn {Function} jmbraket (@emph{jmbra,jmket})
@code{jmbraket} takes the inner product of the jm-kets.
@end deffn

@example
@group
(%i1) K:jmket(j1,m1);
(%o1)                            jmket(j1, m1)
(%i2) B:jmbra(j2,m2);
(%o2)                            jmbra(j2, m2)
(%i3) jmbraket(B,K);
(%o3)                kron_delta(j1, j2) kron_delta(m1, m2)
(%i4) B:jmbra(j1,m1);
(%o4)                            jmbra(j1, m1)
(%i5) jmbraket(B,K);
(%o5)                                  1
(%i6) K:jmket([3/2,1/2]);
                                       [ 3  1 ]
(%o6)                          [jmket, [ -  - ]]
                                       [ 2  2 ]
(%i7) B:jmbra([3/2,1/2]);
                                       [ 3  1 ]
(%o7)                          [jmbra, [ -  - ]]
                                       [ 2  2 ]
(%i8) jmbraket(B,K);
(%o8)                                  1
(%i9) jmbraket(jmbra(j1,m1),jmket(j2,m2));
(%o9)                kron_delta(j1, j2) kron_delta(m1, m2)
@end group
@end example

@deffn {Function} JP (@emph{jmket})
@code{JP} is the @code{J@sub{+}} operator. It takes a @code{jmket}
@code{jmket(j,m)} and returns @code{sqrt(j*(j+1)-m*(m+1))*hbar*jmket(j,m+1)}.
@end deffn

@deffn {Function} JM (@emph{jmket})
@code{JM} is the @code{J@sub{-}} operator. It takes a @code{jmket}
@code{jmket(j,m)} and returns @code{sqrt(j*(j+1)-m*(m-1))*hbar*jmket(j,m-1)}.
@end deffn

@deffn {Function} Jsqr (@emph{jmket})
@code{Jsqr} is the @code{J@sup{2}} operator. It takes a @code{jmket}
@code{jmket(j,m)} and returns @code{(j*(j+1)*hbar@sup{2}*jmket(j,m)}.
@end deffn

@deffn {Function} Jz (@emph{jmket})
@code{Jz} is the @code{J@sub{z}} operator. It takes a @code{jmket}
@code{jmket(j,m)} and returns @code{m*hbar*jmket(j,m)}.
@end deffn

These functions are illustrated below.

@example
@group
(%i1) k:jmket([j,m]);
(%o1)                          [jmket, [ j  m ]]
(%i2) JP(k);
(%o2)          hbar jmket(j, m + 1) sqrt(j (j + 1) - m (m + 1))
(%i3) JM(k);
(%o3)          hbar jmket(j, m - 1) sqrt(j (j + 1) - (m - 1) m)
(%i4) Jsqr(k);
                              2
(%o4)                     hbar  j (j + 1) jmket(j, m)
(%i5) Jz(k);
(%o5)                         hbar jmket(j, m) m
@end group
@end example

@subsection Angular momentum and ladder operators

@deffn {Function} SP (@code{s})
@code{SP} is the raising ladder operator @var{S@sub{+}} for spin @code{s}.
@end deffn

@deffn {Function} SM (@code{s})
@code{SM} is the raising ladder operator @var{S@sub{-}} for spin @code{s}.
@end deffn

Examples of the ladder operators:

@example
@group
(%i1) SP(1);
                       [ 0  sqrt(2) hbar       0       ]
                       [                               ]
(%o1)                  [ 0       0        sqrt(2) hbar ]
                       [                               ]
                       [ 0       0             0       ]
(%i2) SM(1);
                       [      0             0        0 ]
                       [                               ]
(%o2)                  [ sqrt(2) hbar       0        0 ]
                       [                               ]
                       [      0        sqrt(2) hbar  0 ]
@end group
@end example

@section Rotation operators

@deffn {Function} RX (@code{s,t})
@code{RX(s)} for spin @code{s} returns the matrix representation of the
rotation operator @code{Rx} for rotation through angle @code{t}.
@end deffn

@deffn {Function} RY (@code{s,t})
@code{RY(s)} for spin @code{s} returns the matrix representation of the
rotation operator @code{Ry} for rotation through angle @code{t}.
@end deffn

@deffn {Function} RZ (@code{s,t})
@code{RZ(s)} for spin @code{s} returns the matrix representation of the
rotation operator @code{Rz} for rotation through angle @code{t}.
@end deffn

@example
@group
(%i1) RZ(1/2,t);
Proviso: assuming 64*t # 0 
                             [     %i t         ]
                             [   - ----         ]
                             [      2           ]
                             [ %e          0    ]
(%o1)                        [                  ]
                             [             %i t ]
                             [             ---- ]
                             [              2   ]
                             [    0      %e     ]
@end group
@end example

@section Time-evolution operator

@deffn {Function} UU (@code{H,t})
@code{UU(H,t)} is the time evolution operator for Hamiltonian @code{H}. It
is defined as the matrix exponential @code{matrixexp(-%i*H*t/hbar)}.
@end deffn

@example
@group
(%i1) UU(w*Sy,t);
Proviso: assuming 64*t*w # 0 
                           [     t w         t w  ]
                           [ cos(---)  - sin(---) ]
                           [      2           2   ]
(%o1)                      [                      ]
                           [     t w        t w   ]
                           [ sin(---)   cos(---)  ]
                           [      2          2    ]
@end group
@end example

@section Tensor products

Tensor products are represented as lists in the @code{qm} package. The
ket tensor product @code{|z+,z+>} could be represented as
@code{ket([u,d])}, for example, and the bra tensor product @code{<a,b|}
is represented as @code{bra([a,b])} for states @code{a} and
@code{b}. For a tensor product where the identity is one of the elements
of the product, substitute the string @code{Id} in the ket or bra at the
desired location. See the examples below for the use of the identity in
tensor products.

@deffn {Function} tpket ([@code{k@sub{1}}, @code{k@sub{2}}, @dots{}])
@code{tpket} produces a tensor product of kets @code{k@sub{i}}. All
of the elements must pass the @code{ketp} predicate test to be
accepted. If a list is not used for the input kets, the tpket will
be an abstract tensor product ket.
@end deffn

@deffn {Function} tpbra ([@code{b@sub{1}}, @code{b@sub{2}}, @dots{}])
@code{tpbra} produces a tensor product of bras @code{b@sub{i}}. All
of the elements must pass the @code{brap} predicate test to be
accepted. If a list is not used for the input bras, the tpbra will
be an abstract tensor product bra.
@end deffn

@deffn {Function} tpketp (tpket)
@code{tpketp} checks to see that the ket has the 'tpket' marker. Only
the matrix representation will pass this test.
@end deffn

@deffn {Function} tpbrap (tpbra)
@code{tpbrap} checks to see that the bra has the 'tpbra' marker. Only
the matrix representation will pass this test.
@end deffn

@deffn {Function} tpbraket (@code{B,K})
@code{tpbraket} takes the inner product of the tensor products
@code{B} and @code{K}. The tensor products must be of the same length
(number of kets must equal the number of bras).
@end deffn

Examples below show how to create concrete (matrix representation)
tensor products and take the bracket of tensor products.

@example
@group
(%i1) kill(a,b,c,d);
(%o1)                                done
(%i2) declare([a,b,c,d],complex);
(%o2)                                done
(%i3) tpbra([mbra([a,b]),mbra([c,d])]);
(%o3)                    [tpbra, [[ a  b ], [ c  d ]]]
(%i4) tpbra([dagger(zp),mbra([c,d])]);
(%o4)                    [tpbra, [[ 1  0 ], [ c  d ]]]
@end group
@group
(%i1) K:tpket([zp,zm]);
                                     [ 1 ]  [ 0 ]
(%o1)                       [tpket, [[   ], [   ]]]
                                     [ 0 ]  [ 1 ]
(%i2) zpb:dagger(zp);
(%o2)                              [ 1  0 ]
(%i3) zmb:dagger(zm);
(%o3)                              [ 0  1 ]
(%i4) B:tpbra([zpb,zmb]);
(%o4)                    [tpbra, [[ 1  0 ], [ 0  1 ]]]
(%i5) tpbraket(K,B);
(%o5)                                false
(%i6) tpbraket(B,K);
(%o6)                                  1
@end group
@end example

Examples below show how to create abstract tensor products that contain
the identity element @code{Id} and how to take the bracket of these
tensor products.

@example
@group
(%i1) K:ket([a1,b1]);
(%o1)                             |[a1, b1]>
(%i2) B:bra([a2,b2]);
(%o2)                             <[a2, b2]|
(%i3) braket(B,K);
(%o3)                kron_delta(a1, a2) kron_delta(b1, b2)
@end group
@group
(%i1) bra([a1,Id,c1]) . ket([a2,b2,c2]);
(%o1)         |[-, b2, -]> kron_delta(a1, a2) kron_delta(c1, c2)
(%i2) bra([a1,b1,c1]) . ket([Id,b2,c2]);
(%o2)         <[a1, -, -]| kron_delta(b1, b2) kron_delta(c1, c2)
@end group
@end example

@node Function and Variable Index, , Top, Top
@appendix Function and Variable index
@printindex fn
@printindex vr

@bye
