(load(qm),0);
0$

ket(a,b)+ket(c,d);
ket(c,d)+ket(a,b) $

ket([a,b])+ket([c,d]);
matrix([c+a],[d+b]) $

ketprod('zp,'zm)+ketprod('zm,'zp);
ketprod(zp,zm)+ketprod(zm,zp) $

ketprod([zp,zm]);
[tpket,[matrix([1],[0]),matrix([0],[1])]] $

kill(a);
done $

ket(a);
ket(a) $

declare([c1,c2],complex);
done $

ket([c1,c2]);
matrix([c1],[c2]) $

facts();
[ħ > 0,kind(c1,complex),kind(c2,complex)] $

kill(c1,c2);
done $

bra(c1,c2);
bra(c1,c2) $

bra([c1,c2]);
matrix([c1,c2]) $

facts();
[ħ > 0] $

kill(a,b,k);
done $

k:ket(a,b);
ket(a,b) $

ketp(k);
false $

k:ket([a,b]);
matrix([a],[b]) $

ketp(k);
true $

b:bra([a,b]);
matrix([a,b]) $

brap(b);
true $

(remvalue(b),0);
0$

dagger(bra([%i,2]));
matrix([-%i],[2]) $

declare([a,b,c],complex);
done $

braket(ket([a,b,c]),ket([a,b,c]));
c*conjugate(c)+b*conjugate(b)+a*conjugate(a)$

declare([a,b,c],complex);
done $

norm(ket([a,b,c]));
sqrt(c*conjugate(c)+b*conjugate(b)+a*conjugate(a))$

norm(ket(a,b,c));
norm(ket(a,b,c))$

declare([a,b,c,d],complex);
done $

A:braket(ket([a,b]),ket([c,d]));
conjugate(b)*d+conjugate(a)*c$

P:magsqr(A);
(conjugate(b)*d+conjugate(a)*c)*(b*conjugate(d)+a*conjugate(c))$

ket(a)+ket(b);
ket(a)+ket(b)$


braket(bra(a),ket(b));
kron_delta(a,b) $

braket(bra(a)+bra(c),ket(b));
kron_delta(b,c)+kron_delta(a,b)$

zp;
matrix([1],[0]) $

zm;
matrix([0],[1]) $

yp;
matrix([1/sqrt(2)],[%i/sqrt(2)]) $

ym;
matrix([1/sqrt(2)],[-(%i/sqrt(2))]) $

braket(xp,zp);
1/sqrt(2) $

declare([a,b],complex);
done $

psi:ket([a,b]);
matrix([a],[b])$

psi_x:'xp*braket(xp,psi)+'xm*braket(xm,psi);
(b/sqrt(2)+a/sqrt(2))*xp+(a/sqrt(2)-b/sqrt(2))*xm$

sigmay;
matrix([0,-%i],[%i,0]) $

Sy;
matrix([0,-((%i*ħ)/2)],[(%i*ħ)/2,0]) $

commutator(Sx,Sy);
matrix([(%i*ħ^2)/2,0],[0,-((%i*ħ^2)/2)]) $

SY(1/2);
matrix([0,-((%i*ħ)/2)],[(%i*ħ)/2,0]) $

SX(1);
matrix([0,sqrt(2)*ħ,0],[0,0,sqrt(2)*ħ],[0,0,0])$

ev(expect(Sy,xp+ym),ratsimp);
-ħ $

ev(qm_variance(Sy,xp+ym),ratsimp);
(%i*ħ)/2 $

jm_bra(3/2,1/2);
jm_bra(3/2,1/2) $

jm_bra([3/2,1/2]);
[jmbra,matrix([3/2,1/2])] $

jm_ketp(jm_ket(j,m));
false $

jm_ketp(jm_ket([j,m]));
true $

jm_check(3/2,1/2);
true $

K:jm_ket(j1,m1);
jm_ket(j1,m1) $

B:jm_bra(j2,m2);
jm_bra(j2,m2) $

jm_braket(B,K);
kron_delta(j1,j2)*kron_delta(m1,m2) $

B:jm_bra(j1,m1);
jm_bra(j1,m1) $

jm_braket(B,K);
1 $

K:jm_ket([j1,m1]);
[jmket,matrix([j1,m1])] $

B:jm_bra([j2,m2]);
[jmbra,matrix([j2,m2])] $

jm_braket(B,K);
0 $

jm_braket(jm_bra(j1,m1)+jm_bra(j3,m3),jm_ket(j2,m2));
kron_delta(j2,j3)*kron_delta(m2,m3)+kron_delta(j1,j2)*kron_delta(m1,m2) $

k:jm_ket([j,m]);
[jmket,matrix([j,m])] $

JP(k);
ħ*'jm_ket(j,m+1)*sqrt(j*(j+1)-m*(m+1)) $

JM(k);
ħ*'jm_ket(j,m-1)*sqrt(j*(j+1)-(m-1)*m) $

Jsqr(k);
ħ^2*j*(j+1)*'jm_ket(j,m) $

Jz(k);
ħ*'jm_ket(j,m)*m $

SP(1);
matrix([0,sqrt(2)*ħ,0],[0,0,sqrt(2)*ħ],[0,0,0]) $

SM(1);
matrix([0,0,0],[sqrt(2)*ħ,0,0],[0,sqrt(2)*ħ,0]) $

RZ(1/2,t);
matrix([%e^-((%i*t)/2),0],[0,%e^((%i*t)/2)]) $

UU(w*Sy,t);
matrix([cos((t*w)/2),-sin((t*w)/2)],[sin((t*w)/2),cos((t*w)/2)]) $

ketprod(zp,zm);
ketprod(matrix([1],[0]),matrix([0],[1])) $

ketprod('zp,'zm);
ketprod(zp,zm) $

kill(a,b,c,d);
done $

declare([a,b,c,d],complex);
done $

braprod(bra([a,b]),bra([c,d]));
braprod(matrix([a,b]),matrix([c,d])) $

braprod(dagger(zp),bra([c,d]));
braprod(matrix([1,0]),matrix([c,d])) $

K:ketprod(zp,zm);
ketprod(matrix([1],[0]),matrix([0],[1])) $

zpb:dagger(zp);
matrix([1,0]) $

zmb:dagger(zm);
matrix([0,1]) $

B:braprod(zpb,zmb);
braprod(matrix([1,0]),matrix([0,1])) $

braketprod(K,B);
false $

braketprod(B,K);
false $

