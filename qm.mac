/*
;;  Author Eric Majzoub, Department of Physics and Astronomy
;;  University of Missouri, St. Louis
;;  Copyright (C) 2024 Eric Majzoub

;;  This program is free software; you can redistribute it and/or modify 
;;  it under the terms of the GNU General Public License as published by         
;;  the Free Software Foundation; either version 2 of the License, or            
;;  (at your option) any later version.                                  
                                                                                 
;;  This program is distributed in the hope that it will be useful,              
;;  but WITHOUT ANY WARRANTY; without even the implied warranty of               
;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                
;;  GNU General Public License for more details.         

;; Quantum mechanics package for Maxima.
*/

qm_version: "0.9pre"$

/* load additional codes */
load("qm.lisp") $
load("autoket.mac") $

/* load the documentation */
load("qm-index.lisp")$
load("qm-index-html.lisp")$

/******************/
/*    flags       */
/******************/

/*****************************************/
/*    complexp and realp predicates      */
/*****************************************/
/* This definition of complexp finds anything declared complex to be true */
complexp(z):=block([y:imagpart(z)],
	if featurep(z,complex) or featurep(conjugate(z),complex) then return(true),
	if y#0 and numberp(y) then return(true),
	false);
realp(r):=block(if featurep(r,real) and complexp(r)=false and not matrixp(r)
		   then return(true), false);	

/******************************/
/* Simplification definitions */
/******************************/
matchdeclare([x,y],freeof(%i));
matchdeclare([cc],numberp);
tellsimpafter(%e^x*(%e^y+cc),%e^(x+y)+cc*%e^x);
tellsimpafter(%e^x*(cc-%e^y),cc*%e^x-%e^(x+y));

matchdeclare(x,freeof(%i));
tellsimpafter(%e^x+%e^(-x),2*cosh(x));
tellsimpafter(%e^x-%e^(-x),2*sinh(x));
tellsimpafter(sinh(x)/cosh(x),tanh(x));
tellsimpafter(cos(x)+%i*sin(x),%e^(%i*x));
tellsimpafter(cos(x)-%i*sin(x),%e^(-%i*x));

/*******************************/
/* Constants and assumptions   */
/*******************************/
assume(Ä§>0) $

/************************/
/* make simple vectors  */
/************************/
/* Real column and row vectors, Note: kets and bras are below */
cvec([u]) := transpose(matrix(u)) $
rvec([u]) := matrix(u) $

/***************************************************/
/* implement bra, ket operators via simplification */
/***************************************************/
/* bras and kets entered as lists will be given matrix representations */
/* bra and ket of a list represented as row and column matrices, respectively */
matchdeclare(ll, listp);
tellsimpafter(mbra(ll), matrix(ll));
tellsimpafter(mket(ll), transpose(matrix (ll)));

/***************************************/
/* Rules, simp for general kets/bras   */
/***************************************/
/* predicates for general bras and kets, thanks to BW */
ketp(psi) := not mapatom(psi) and is(inpart(psi,0) = 'ket) $
brap(psi) := not mapatom(psi) and is(inpart(psi,0) = 'bra) $

/**********/
/* dagger */
/**********/
declare(dagger,additive);
declare(dagger,multiplicative);

matchdeclare([i,j],all,mm,mapatom,nn,integerp);
simp:false; tellsimp( dagger(dagger(i)) , i); simp:true;
simp:false; tellsimp( dagger(mm^nn), dagger(mm)^nn ); simp:true;
simp:false; tellsimp( dagger( i . j ) , dagger(j) . dagger(i) ); simp:true;

/* dagger for general kets and bras */
matchdeclare([i,j],all,[L1,L2],listp);
tellsimpafter( dagger( bra(L1) ), ket(L1) );
tellsimpafter( dagger( ket(L1) ), bra(L1) );
tellsimpafter( dagger( i*ket(L1)), dagger(i)*bra(L1) );
tellsimpafter( dagger( i*bra(L1)), dagger(i)*ket(L1) );

/* simplify dagger for complex and real numbers */
matchdeclare(cx,complexp,rx,numberp,rr,realp);
simp:false; tellsimp( dagger(cx) , conjugate(cx) ); simp:true;
simp:false; tellsimp( dagger(rx) , rx ); simp:true;
simp:false; tellsimp( dagger(rr) , rr ); simp:true;

/* special case of dagger for matrix argument */
matchdeclare(mx, matrixp,nn,integerp);
simp:false; tellsimp( dagger( mx^nn ), dagger(mx)^nn );
simp:false; tellsimp( dagger( mx^^nn ), dagger(mx)^^nn );
tellsimpafter( dagger(mx), conjugate(transpose (mx)) );

/********************/
/*    braket        */
/********************/
declare(braket,additive);

/* braket rules for matrix reps */
matchdeclare([kk,ll], mketp, bb, mbrap );
tellsimpafter( braket(bb,kk) , bb . kk );
tellsimpafter( braket(ll,kk) , dagger(ll) . kk);
tellsimpafter( braket(kk,bb) , false );
tellsimpafter( braket(bb,bb) , false );

/************************************/
/* simp rules for general kets bras */
/************************************/
matchdeclare([L1,L2],listp);
tellsimpafter(braket(ket(L1),ket(L2)), bra(L1) . ket(L2) );

cnump(z):=if complexp(z) or numberp(z) then true;
matchdeclare([a,b,A1,A2],all,[cx1,cx2,cx3,cx4],cnump,[L1,L2],listp);
tellsimpafter( a . (A1+A2), expand(a . (A1 + A2)) );
simp:false; tellsimpafter( cx1*bra(L1) . cx3*ket(L2), cx1*cx3* (bra(L1) . ket(L2))); simp:true;
simp:false; tellsimpafter( bra(L1)*cx2 . ket(L2)*cx4, cx2*cx4* (bra(L1) . ket(L2))); simp:true;
simp:false; tellsimpafter( bra(L1)*cx2 . cx3*ket(L2), cx2*cx3* (bra(L1) . ket(L2))); simp:true;
simp:false; tellsimpafter( cx1*bra(L2) . ket(L2)*cx4, cx1*cx4* (bra(L1) . ket(L2))); simp:true;

/* Very important rule that allows simplification of general expressions. */
/* This works because of the way the simplifier outputs things in () */
tellsimpafter( (bra(L1)*a) . (ket(L2)*b), a*b*(bra(L1) . ket(L2)));

matchdeclare([L1,L2,L3],listp,[a,b],all);
tellsimpafter(bra(L1) . ket(L2) . a , braket(bra(L1),ket(L2)) . a);
tellsimpafter(a . bra(L1) . ket(L2) , a . braket(bra(L1),ket(L2)));
tellsimpafter(a . bra(L1) . ket(L2) . b , a . braket(bra(L1),ket(L2)) . b);

/* <a|b> --> delta(a,b), assumes an orthonormal set */
tellsimpafter( bra(L1) . ket(L2), braket(bra(L1),ket(L2)));
tellsimpafter( braket(bra(L1),ket(L2)), gsimpbraket(L1,L2) );
gsimpbraket(L1,L2):=block([i,l1flag:0,l2flag:0,prod:1,
	L3:makelist("-",i,length(L1)),L4:makelist("-",i,length(L2))],
	if length(L1)#length(L2) then return(false),
	for i: 1 thru length(L1) do
	    if L1[i]=Id then (L4[i]:L2[i],l1flag:1)
	    elseif L2[i]=Id then (L3[i]:L1[i],l2flag:1) else
	    prod: prod * kron_delta(L1[i],L2[i]),
	    if l1flag=1 then return(prod*ket(L4))
	    elseif l2flag=1 then return(prod*bra(L3))
	    else return(prod) );


/*********************************/
/*     miscellaneous rules       */
/*********************************/
/* norm for matrix represented kets/bras */
matchdeclare( kk, mketp, bb, mbrap );
tellsimpafter(norm(kk), sqrt( braket(kk,kk) ));
tellsimpafter(norm(bb), sqrt( braket(bb,dagger(bb)) ));

/* norm for abstract kets/bras */
matchdeclare( ak, ketp, ab, brap );
tellsimpafter(norm(ak),1);
tellsimpafter(norm(ab),1);

/* magsqr */
magsqr(c) := c*conjugate(c);

/* commutator */
commutator(X,Y) := X.Y - Y.X;
expect(Op,psi) := dagger(psi) . Op . psi $
qm_variance(Op,psi) := sqrt(expect(Op . Op,psi) - expect(Op,psi)^2) $

/* Born rule */
probability(psi,n) := magsqr(psi[n]);

/***************************************/
/* Define predicates for kets and bras */
/***************************************/
mketp(psi) := block([r,c],
     if matrixp(psi) then (
        [r,c] : matrix_size(psi),
        (c = 1) and (r > 1) and every(lambda([q], not (matrixp(q) or listp(q) or setp(q))), psi))
    else false);
mbrap(psi) := block([r,c],
     if matrixp(psi) then (
        [r,c] : matrix_size(psi),
        (r = 1) and (c > 1) and every(lambda([q], not (matrixp(q) or listp(q) or setp(q))), psi))
    else false);



/******************************************************/
/******************************************************/
/*              (j,m) kets and bras                   */
/******************************************************/
/******************************************************/
rationalp(a):= if integerp(num(a)) and integerp(denom(a)) then true else false;
sym_ratp(a):=block(if symbolp(a) or rationalp(a) then
		      return(true) else return(false) );
matchdeclare([j,m], sym_ratp );
tellsimpafter( jmket([j,m]) , [jmket, matrix([j,m])] );
tellsimpafter( jmbra([j,m]) , [jmbra, matrix([j,m])] );

jmketp(k) := if k[1]#jmket then false else true$
jmbrap(k) := if k[1]#jmbra then false else true$

matchdeclare(jb, jmbrap, jk, jmketp); /* covers the matrix rep */
tellsimpafter( jmbraket(jb,jk), simp_jmbraket(jb,jk) );
simp_jmbraket(b,k) := block([j1,j2,m1,m2],
	     if b[1]#jmbra or k[1]#jmket then return(false),
	     j1:b[2][1][1], m1:b[2][1][2], j2:k[2][1][1], m2:k[2][1][2],
	     if j1=j2 and m1=m2 then return(1) else return(0) )$
/* Check that m is within -j to +j */
jmcheck(j,m) := block([pos:0],
	      if rationalp(j)=false or rationalp(m)=false then return(false) else
	      	 for jn: j step -1 thru -j do
		     if jn=m then pos:1,
		 if pos=1 then true else false )$
JP(k) := block([j,m,sqrterm],
      if k[1]#jmket then return(false),
      j:k[2][1][1], m:k[2][1][2], sqrterm:sqrt(j*(j+1)-m*(m+1))*hbar,
      return( sqrterm * 'jm_ket(j,m+1) ) )$
JM(k) := block([j,m,sqrterm],
      if k[1]#jmket then return(false),
      j:k[2][1][1], m:k[2][1][2], sqrterm:sqrt(j*(j+1)-m*(m-1))*hbar,
      return( sqrterm * 'jm_ket(j,m-1) ) )$
Jsqr(k) := block([j,m,sqrterm],
      if k[1]#jmket then return(false),
      j:k[2][1][1], return( (j*(j+1)) * hbar^2 * 'jm_ket(j,m) ) )$
Jz(k) := block([j,m,sqrterm],
      if k[1]#jmket then return(false),
      m:k[2][1][2], return( m * hbar * 'jm_ket(j,m) ) )$

/********************************************/
/* Rules, simp for general jmkets/jmbras    */
/********************************************/
matchdeclare([jj1,jj2,mm1,mm2],sym_ratp, c, all);
tellsimpafter(jmbraket(jmbra(jj1,mm1),jmket(jj2,mm2)),
	kron_delta(jj1,jj2)*kron_delta(mm1,mm2)); /* <j1m1,j2m2> --> delta(j1j2)*delta(m1m2) */
tellsimpafter(jmbraket(jmbra(jj1,mm1)+c, jmket(jj2,mm2)),
	jmbraket(jmbra(jj1,mm1),jmket(jj2,mm2))+jmbraket(c,jmket(jj2,mm2))); /* distribution */

/******************************************************/
/******************************************************/
/* Angular momentum ladder operators for general spin */
/******************************************************/
/******************************************************/
SP(s) := genmatrix(lambda([i,j], block([m:-s+j-2],
         Ä§*kron_delta(i,j-1)*sqrt( s*(s+1)-m*(m+1)) )), 2*s+1,2*s+1);
SM(s) := dagger(SP(s))$
SX(s) := (1/2)*(SP(s)+SM(s))$
SY(s) := (%i/2)*(SM(s)-SP(s))$
SZ(s) := 1/(%i*Ä§)*commutator(SX(s),SY(s))$


/******************/
/* Spin-1/2 stuff */
/******************/

/* spin-1/2 state vectors */
zp : cvec(1,0) $
zm : cvec(0,1) $
xp : (1/sqrt(2))*(zp+zm) $
xm : (1/sqrt(2))*(zp-zm) $
yp : (1/sqrt(2))*(zp+%i*zm) $
ym : (1/sqrt(2))*(zp-%i*zm) $

/* Pauli sigma matrices */
sigmax : matrix([0,1],[1,0]) $
sigmay : matrix([0,-%i],[%i,0]) $
sigmaz : matrix([1,0],[0,-1]) $

/* spin-1/2 matrices */
Sz : SZ(1/2) $
Sx : SX(1/2) $
Sy : SY(1/2) $

/******************/
/* Spin-1 stuff */
/******************/

/* basis states for a spin-1 particle */
zu : cvec(1,0,0) $
zz : cvec(0,1,0) $
zd : cvec(0,0,1) $

/* spin-1 matrices
Sz1 : Ä§*matrix([1,0,0],[0,0,0],[0,0,-1]) $
Sx1 : (Ä§/sqrt(2))*matrix([0,1,0],[1,0,1],[0,1,0]) $
Sy1 : (Ä§/sqrt(2))*matrix([0,-%i,0],[%i,0,-%i],[0,%i,0]) $ */
Sz1 : SZ(1) $
Sx1 : SX(1) $
Sy1 : SY(1) $


/****************************************/
/*         Rotation Operators           */
/****************************************/
Rot(Op,phi) := block([M1,M2,M3],
	  M1: matrixexp(-%i*Op*phi/Ä§),
	  M2: matrixmap(distrib,M1),
	  M3: matrixmap(combine,M2),
	  trigreduce(M3)
	  )$

/* the following is so RZ appears with exponentials
   and RX and RY with trig functions */
RZ(s,t) := Rot(SZ(s),t)$
RX(s,t) := block([demoivre:true], Rot(SX(s),t))$
RY(s,t) := block([demoivre:true], Rot(SY(s),t))$

/* time-evolution operator */
UU(H,t) := block([M,demoivre:true], Rot(H,t))$

/*****************************************************************/
/*****************************************************************/
/*****************************************************************/
/*                tensor products in the matrix rep              */
/*****************************************************************/
/*****************************************************************/
/*****************************************************************/
matchdeclare(ll,listp);
tellsimpafter(tpket(ll), simptpket(ll));
simptpket(u) := block([N,fail:0],
	     N: length(u),
	     for i: 1 thru N do
	     	 if mketp(''u[i])=false then fail:1,
	     if fail=0 then [tpket,u]
	     else disp("all elements must be kets") )$

tellsimpafter(tpbra(ll), simptpbra(ll));
simptpbra(u) := block([N,fail:0],
	     N: length(u),
	     for i: 1 thru N do
	     	 if mbrap(''u[i])=false then fail:1,
	     if fail=0 then [tpbra,u]
	     else disp("all elements must be bras") )$
matchdeclare([L1,L2], listp);
tellsimpafter(tpbraket(L1,L2), simptpbraket(L1,L2));
simptpbraket(B,K) := block([N,M,fail:0,prod:1],
		if is(B[1]#tpbra) then return(false),
		if is(K[1]#tpket) then return(false),
		N: length(B[2]),
		M: length(K[2]),
		if M#N then return(false)
		else for i: 1 thru N do
		     prod: prod*braket(B[2][i],K[2][i]),
		prod )$

